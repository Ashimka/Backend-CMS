generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(cuid())

  email    String? @unique
  vkId     Int?    @unique @map("vk_id")
  password String?

  role   Role   @default(USER)
  name   String @default("Не указано")
  avatar String

  profile Profile?

  reviews   Review[]
  favorites Favorites[]
  orders    Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id String @id @unique @default(cuid())

  address   String
  firstName String @map("first_name")
  lastName  String @map("last_name")
  phone     String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum Role {
  ADMIN
  USER
  EMPLOYEES
}

model Product {
  id String @id @unique @default(cuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Int
  images      String[]

  reviews Review[]

  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?     @map("category_id")
  Favorites  Favorites[]
  OrderItem  OrderItem[]

  @@map("products")
  @@index([categoryId])
  @@index([title])
}

model Favorites {
  id String @id @default(cuid())

  products Product? @relation(fields: [productId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  productId String? @map("product_id")
  userId    String? @map("user_id")
}

model Category {
  id String @id @default(cuid())

  title       String
  description String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
  @@index([title])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  @@map("review")
}

model Order {
  id String @id @default(cuid())

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]
  total  Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int
  price    Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_item")
  @@index([orderId])
  @@index([productId])
  @@index([createdAt])
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
